// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: foo.sql

package example

import (
	"context"

	"github.com/google/uuid"
)

const getFoo = `-- name: GetFoo :one
SELECT
    id, value
FROM
    foo
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetFoo(ctx context.Context, id uuid.UUID) (Foo, error) {
	row := q.db.QueryRowContext(ctx, getFoo, id)
	var i Foo
	err := row.Scan(&i.ID, &i.Value)
	return i, err
}

const getFoos = `-- name: GetFoos :many
SELECT
    id, value
FROM
    foo
`

func (q *Queries) GetFoos(ctx context.Context) ([]Foo, error) {
	rows, err := q.db.QueryContext(ctx, getFoos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foo
	for rows.Next() {
		var i Foo
		if err := rows.Scan(&i.ID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const writeFoo = `-- name: WriteFoo :one
INSERT INTO foo (id, value) VALUES ($1, $2) RETURNING id, value
`

type WriteFooParams struct {
	ID    uuid.UUID
	Value string
}

func (q *Queries) WriteFoo(ctx context.Context, arg WriteFooParams) (Foo, error) {
	row := q.db.QueryRowContext(ctx, writeFoo, arg.ID, arg.Value)
	var i Foo
	err := row.Scan(&i.ID, &i.Value)
	return i, err
}
